# {{ ansible_managed }}
# -*- coding: utf-8 -*-
import time
import java.lang
import re
import sys
import binascii


def get_started_clusters():
    appcluster_list = AdminControl.queryNames('type=Cluster,*').split('\n')
    for cluster_obj in appcluster_list:
        cluster_state = AdminControl.getAttribute(cluster_obj, 'state')
        cluster_name = AdminControl.getAttribute(cluster_obj, 'clusterName')
        stopped_str = 'websphere.cluster.stopped'
        started_str = 'websphere.cluster.running'
        if cluster_state == 'websphere.cluster.running':
            None
        else:
            appcluster_list.remove(cluster_obj)
    return appcluster_list


def get_stopped_clusters():
    appcluster_list = AdminControl.queryNames('type=Cluster,*').split('\n')
    for cluster_obj in appcluster_list:
        cluster_state = AdminControl.getAttribute(cluster_obj, 'state')
        cluster_name = AdminControl.getAttribute(cluster_obj, 'clusterName')
        if cluster_state == 'websphere.cluster.stopped':
            None
        else:
            appcluster_list.remove(cluster_obj)

    return appcluster_list


def stop_clusters(running_clusters, app_clusters_stop_order):
    for app_clusters_order in app_clusters_stop_order:
        for cluster_obj in running_clusters:
            cluster_name = AdminControl.getAttribute(cluster_obj, 'clusterName')
            if cluster_name == app_clusters_order:
                print("Stop cluster '%s'" % cluster_name)
                AdminControl.invoke(cluster_obj, 'stop')
                running_clusters.remove(cluster_obj)
                while (1 == 1):
                    cluster_state = AdminControl.getAttribute(cluster_obj, 'state')
                    if cluster_state != 'websphere.cluster.stopped':
                        print("Cluster '%s' in '%s' state. Wait to stop cluster..." % (cluster_name, cluster_state))
                        time.sleep(10)
                    else:
                        break
        # Last - stop cluster which not found in 'app_clusters_start_order' variable
        for cluster_obj in running_clusters:
            cluster_name = AdminControl.getAttribute(cluster_obj, 'clusterName')
            if cluster_name == app_clusters_order:
                print("Stop cluster '%s'" % cluster_name)
                AdminControl.invoke(cluster_obj, 'stop')
                while (1 == 1):
                    cluster_state = AdminControl.getAttribute(cluster_obj, 'state')
                    if cluster_state != 'websphere.cluster.stopped':
                        print("Cluster '%s' in '%s' state. Wait to stop cluster..." % (cluster_name, cluster_state))
                        time.sleep(10)
                    else:
                        break


def start_clusters(stopped_clusters, app_clusters_start_order):
    for app_clusters_order in app_clusters_start_order:
        for cluster_obj in stopped_clusters:
            cluster_name = AdminControl.getAttribute(cluster_obj, 'clusterName')
            if cluster_name == app_clusters_order:
                print("Start cluster '%s'" % cluster_name)
                AdminControl.invoke(cluster_obj, 'start')
                stopped_clusters.remove(cluster_obj)
                while (1 == 1):
                    cluster_state = AdminControl.getAttribute(cluster_obj, 'state')
                    if cluster_state != 'websphere.cluster.running':
                        print("Cluster '%s' in '%s' state. Wait to start cluster..." % (cluster_name, cluster_state))
                        time.sleep(10)
                    else:
                        break
        # Last - start cluster which not found in 'app_clusters_start_order' variable
        for cluster_obj in stopped_clusters:
            cluster_name = AdminControl.getAttribute(cluster_obj, 'clusterName')
            if cluster_name == app_clusters_order:
                print("Start cluster '%s'" % cluster_name)
                AdminControl.invoke(cluster_obj, 'start')
                while (1 == 1):
                    cluster_state = AdminControl.getAttribute(cluster_obj, 'state')
                    stopped_clusters.remove(cluster_obj)
                    if cluster_state != 'websphere.cluster.running':
                        print("Cluster '%s' in '%s' state. Wait to start cluster..." % (cluster_name, cluster_state))
                        time.sleep(10)
                    else:
                        break


def main():
    app_clusters_start_order = [{% for jinja_cluster in appclusters %}'{{ jinja_cluster.cluster_name }}'{% if jinja_cluster.cluster_name != appclusters[-1].cluster_name %},{% endif %}{% endfor %}]
    app_clusters_stop_order = app_clusters_start_order[:]
    app_clusters_stop_order.reverse()
    available_commands=['start','stop','check']
    try:
        command = sys.argv[0]
    except:
        pass
    
    if command not in available_commands:
        print("ERROR! Available commands:\n%s" % available_commands)
        return 1
    
    if command == 'stop':
        running_clusters = get_started_clusters()
        stop_clusters(running_clusters, app_clusters_stop_order)

    if command == 'start':
        stopped_clusters = get_stopped_clusters()
        start_clusters(stopped_clusters, app_clusters_start_order)
    
    if command == 'check':
        running_clusters = get_started_clusters()
        stopped_clusters = get_stopped_clusters()
        if running_clusters:
            print("ansible WARNING!!! '%s' cluster is running!")
        if stopped_clusters:
            print("ansible WARNING!!! '%s' cluster is stopped!")


sys.exit(main())
